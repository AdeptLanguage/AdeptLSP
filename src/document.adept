
import JSON
import LinearMap

record Document (
    uri String,
    text_content String,
    ast JSON,
    identifierTokens <IdentifierToken> List,
    functions <Function> List,
    composites <Composite> List,
    aliases <Alias> List,
    function_aliases <FunctionAlias> List,
    enums <Enum> List,
    named_expressions <NamedExpression> List,
) {
    constructor(uri POD String, text_content POD String, ast POD JSON) {
        this.uri = uri
        this.text_content = text_content
        this.ast = ast
    }

    func __assign__(other POD Document) {
        this.uri = other.uri.toOwned()
        this.text_content = other.text_content.toOwned()
        this.ast = other.ast.toOwned()
        this.identifierTokens = other.identifierTokens.clone()
        this.functions = other.functions.clone()
        this.composites = other.composites.clone()
        this.aliases = other.aliases.clone()
        this.function_aliases = other.function_aliases.clone()
        this.enums = other.enums.clone()
        this.named_expressions = other.named_expressions.clone()
    }
}

struct Documents (documents <String, Document> LinearMap) {
    func set(uri String, text_content String) {
        document *Document = this.documents.getPointer(uri)

        if document == null {
            log("Creating document `%S`...\n", uri)
            element *<String, Document> AsymmetricPair = this.documents.elements.add()
            element.first = uri.clone()
            element.second = POD Document(uri.toOwned(), text_content.toOwned(), JSON\undefined())
            return
        }

        log("Updating document `%S`...\n", uri)
        document.text_content = text_content.toOwned()
    }

    func remove(uri String) {
        log("Removing document `%S`...\n", uri)
        this.documents.remove(uri)
    }

    func getPointer(uri String) *Document {
        return this.documents.getPointer(uri)
    }
}

adeptls\documents Documents

func openDocument(message *Message) {
    log("Processing textDocument\\didOpen\n")

    uri String = message.params.field("textDocument").field("uri").string().orElse("")
    text_content String = message.params.field("textDocument").field("text").string().orElse("")

    adeptls\documents.set(uri.commit(), text_content.commit())
    update(uri)
}

func changeDocument(message *Message) {
    log("Processing textDocument\\didChange\n")

    uri String = message.params.field("textDocument").field("uri").string().orElse("")
    changes <<JSON> List> Optional = message.params.field("contentChanges").array()

    if changes.has {
        log("Has changes\n")
        last *JSON = changes.get().last()

        if last != null {
            log("Has latest change\n")
            text_content String = last.field("text").string().orElse("")
            adeptls\documents.set(uri, text_content.commit())
            update(uri)
        }
    }
}

func closeDocument(message *Message) {
    log("Processing textDocument\\didClose\n")

    uri String = message.params.field("textDocument").field("uri").string().orElse("")
    adeptls\documents.remove(uri.commit())
}
