
import basics
import JSON
import "text.adept"

record Location (uri String, range Range) {
    constructor(json JSON) {
        this.uri = json.field("uri").string().orElse("").toOwned()
        this.range = Range(json.field("range"))
    }

    func toJSON() JSON {
        return JSON({
            AsymmetricPair("uri", JSON(this.uri.clone())),
            AsymmetricPair("range", JSON({
                AsymmetricPair("start", JSON({
                    AsymmetricPair("line", JSON(this.range.start.line)),
                    AsymmetricPair("character", JSON(this.range.end.character)),
                })),
                AsymmetricPair("end", JSON({
                    AsymmetricPair("line", JSON(this.range.end.line)),
                    AsymmetricPair("character", JSON(this.range.end.character)),
                })),
            }))
        })
    }
}

record Source (object String, index, stride usize) {
    constructor(json JSON) {
        this.object = json.field("object").string().orElse("").toOwned()
        this.index = json.field("index").number().orElse(0.0) as usize
        this.stride = json.field("stride").number().orElse(0.0) as usize
    }

    func toLocation() <Location> Optional {
        uri String = "file://" + this.object
        position <Position> Optional = getTextPosition(this.object, this.index)

        if position.has {
            return some(Location(uri.commit(), Range(position.value, position.value)))
        } else {
            return none()
        }
    }

    func clone() Source {
        source POD Source
        source.object = POD this.object.clone()
        source.index = this.index
        source.stride = this.stride
        return source
    }
}

record Position (line, character usize) {
    constructor(json JSON) {
        this.line = json.field("line").number().orElse(0.0) as usize
        this.character = json.field("character").number().orElse(0.0) as usize
    }
}

func __equals__(a, b Position) bool {
    return a.line == b.line and a.character == b.character
}

func __not_equals__(a, b Position) bool {
    return !__equals__(a, b)
}

func __less_than__(a, b Position) bool {
    return a.line < b.line || (a.line == b.line and a.character < b.character)
}

func __less_than_or_equal__(a, b Position) bool {
    return a.line < b.line || (a.line == b.line and a.character <= b.character)
}

func __greater_than__(a, b Position) bool {
    return __less_than_or_equal__(b, a)
}

func __greater_than_or_equal__(a, b Position) bool {
    return __less_than__(b, a)
}

record Range (start, end Position) {
    constructor(json JSON) {
        this.start = Position(json.field("start"))
        this.end = Position(json.field("end"))
    }

    func contains(position Position) bool {
        return this.start <= position and position <= this.end
    }
}

record IdentifierToken (content String, range Range) {
    constructor(json JSON) {
        this.content = json.field("content").string().orElse("").toOwned()
        this.range = Range(json.field("range"))
    }

    func clone IdentifierToken {
        return IdentifierToken(this.content.clone(), this.range)
    }
}


record Symbol (name, definition String, source Source) {
    constructor(json JSON) {
        this.name = json.field("name").string().orElse("").toOwned()
        this.definition = json.field("definition").string().orElse("").toOwned()
        this.source.__constructor__(json.field("source"))
    }

    func clone Symbol {
        return Symbol(this.name.clone(), this.definition.clone(), this.source.clone())
    }
}

record Function (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Function = Function(this.symbol.clone())
}

record Composite (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Composite = Composite(this.symbol.clone())
}

record Alias (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Alias = Alias(this.symbol.clone())
}

record FunctionAlias (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone FunctionAlias = FunctionAlias(this.symbol.clone())
}

record Enum (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Enum = Enum(this.symbol.clone())
}

record NamedExpression (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone NamedExpression = NamedExpression(this.symbol.clone())
}
