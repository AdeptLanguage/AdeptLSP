
import basics
import JSON
import "text.adept"

record Location (uri String, range Range) {
    constructor(json JSON) {
        this.uri = json.field("uri").string().orElse("").toOwned()
        this.range = Range(json.field("range"))
    }

    func toJSON() JSON {
        return JSON({
            AsymmetricPair("uri", JSON(this.uri.clone())),
            AsymmetricPair("range", this.range.toJSON()),
        })
    }

    func clone Location {
        cloned POD Location
        cloned.uri = POD this.uri.clone()
        cloned.range = this.range
        return cloned
    }
}

record Source (object String, index, stride usize) {
    constructor(json JSON) {
        this.object = json.field("object").string().orElse("").toOwned()
        this.index = json.field("index").number().orElse(0.0) as usize
        this.stride = json.field("stride").number().orElse(0.0) as usize
    }

    func toLocation() <Location> Optional {
        uri String = "file://" + this.object
        position <Position> Optional = getTextPosition(this.object, this.index)

        if position.has {
            return some(Location(uri.commit(), Range(position.value, position.value)))
        } else {
            return none()
        }
    }

    func clone() Source {
        source POD Source
        source.object = POD this.object.clone()
        source.index = this.index
        source.stride = this.stride
        return source
    }
}

record Position (line, character usize) {
    constructor(json JSON) {
        this.line = json.field("line").number().orElse(0.0) as usize
        this.character = json.field("character").number().orElse(0.0) as usize
    }
}

func __equals__(a, b Position) bool {
    return a.line == b.line and a.character == b.character
}

func __not_equals__(a, b Position) bool {
    return !__equals__(a, b)
}

func __less_than__(a, b Position) bool {
    return a.line < b.line || (a.line == b.line and a.character < b.character)
}

func __less_than_or_equal__(a, b Position) bool {
    return a.line < b.line || (a.line == b.line and a.character <= b.character)
}

func __greater_than__(a, b Position) bool {
    return __less_than_or_equal__(b, a)
}

func __greater_than_or_equal__(a, b Position) bool {
    return __less_than__(b, a)
}

record Range (start, end Position) {
    constructor(json JSON) {
        this.start = Position(json.field("start"))
        this.end = Position(json.field("end"))
    }

    func contains(position Position) bool {
        return this.start <= position and position <= this.end
    }

    func toJSON JSON {
        return JSON({
            AsymmetricPair("start", JSON({
                AsymmetricPair("line", JSON(this.start.line)),
                AsymmetricPair("character", JSON(this.end.character)),
            })),
            AsymmetricPair("end", JSON({
                AsymmetricPair("line", JSON(this.end.line)),
                AsymmetricPair("character", JSON(this.end.character)),
            })),
        })
    }
}

func Range\empty() Range {
    return Range(Position(0, 0), Position(0, 0))
}

record IdentifierToken (content String, range Range) {
    constructor(json JSON) {
        this.content = json.field("content").string().orElse("").toOwned()
        this.range = Range(json.field("range"))
    }

    func clone IdentifierToken {
        cloned POD IdentifierToken
        cloned.content = POD this.content.clone()
        cloned.range = this.range
        return cloned
    }
}


record Symbol (name, definition String, source Source) {
    constructor(json JSON) {
        this.name = json.field("name").string().orElse("").toOwned()
        this.definition = json.field("definition").string().orElse("").toOwned()
        this.source.__constructor__(json.field("source"))
    }

    func clone Symbol {
        cloned POD Symbol
        cloned.name = POD this.name.clone()
        cloned.definition = POD this.definition.clone()
        cloned.source = POD this.source.clone()
        return cloned
    }
}

record Function (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Function {
        cloned POD Function
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

record Composite (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Composite {
        cloned POD Composite
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

record Alias (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Alias {
        cloned POD Alias
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

record FunctionAlias (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone FunctionAlias {
        cloned POD FunctionAlias
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

record Enum (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone Enum {
        cloned POD Enum
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

record NamedExpression (symbol Symbol) {
    constructor(json JSON) {
        this.symbol.__constructor__(json)
    }

    func clone NamedExpression {
        cloned POD NamedExpression
        cloned.symbol = POD this.symbol.clone()
        return cloned
    }
}

enum Severity (_INVALID, ERROR, WARNING, INFORMATION, HINT)

record Diagnostic (severity Severity, range Range, message String) {
    func clone Diagnostic {
        cloned POD Diagnostic
        cloned.severity = this.severity
        cloned.range = this.range
        cloned.message = POD this.message.clone()
        return cloned
    }

    func toJSON JSON {
        return JSON({
            AsymmetricPair("severity", JSON\number(this.severity as usize as double)),
            AsymmetricPair("range", this.range.toJSON()),
            AsymmetricPair("message", JSON(this.message)),
        })
    }
}

func Diagnostic(json JSON, document *Document) Diagnostic {
    diagnostic POD Diagnostic

    source Source
    source.__constructor__(json.field("source"))

    // Get severity
    if json.field("kind").string().orElse("") == "error" {
        diagnostic.severity = ::ERROR
    } elif json.field("kind").string().orElse("") == "warning" {
        diagnostic.severity = ::WARNING
    } else {
        diagnostic.severity = ::ERROR
    }

    if document.uri == "file://" + source.object {
        // Get range
        start <Position> Optional = getTextPosition(source.object, source.index)
        end <Position> Optional = getTextPosition(source.object, source.index + max(source.stride, 1uz))

        if start.has && end.has {
            diagnostic.range = Range(start.value, end.value)
        }

        // Get message
        diagnostic.message = POD json.field("message").string().orElse("").toOwned()
    }

    return diagnostic
}

