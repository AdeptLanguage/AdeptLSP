
import basics
import "datatypes.adept"

func update(uri String) {

    log("Running update...\n")

    document *Document = adeptls\documents.getPointer(uri)
    if document == null, return

    log("Has document...\n")

    filename String = getFilenameFromURI(uri)

    log("Running insight...\n")

    response JSON = invokeInsight(JSON({
        AsymmetricPair("query", JSON("ast")),
        AsymmetricPair("infrastructure", JSON(adeptls\infrastructure.toOwned())),
        AsymmetricPair("filename", JSON(filename.toOwned())),
        AsymmetricPair("code", JSON(document.text_content.toOwned())),
    }))

    log("Got insight response...\n")

    if response.kind() == ::STRING {
        // Error occurred

        message String = response.string().orElse("")

        document.diagnostics.clear()
        document.diagnostics.add(Diagnostic(::ERROR, Range\empty(), message.toOwned()))

        publishDiagnostics(document)
        return
    }

    validation <<JSON> List> Optional = response.field("validation").array()

    if validation.has {
        document.diagnostics.clear()

        each JSON in validation.value {
            *document.diagnostics.add() = Diagnostic(it, document)
        }

        publishDiagnostics(document)
    }

    ast JSON = response.field("ast")

    if ast.kind() == ::OBJECT {
        // Updated AST
        document.ast = ast
    }

    identifierTokens <<JSON> List> Optional = response.field("identifierTokens").array()
    if identifierTokens.has {
        // Update identifier tokens
        document.identifierTokens.clear()

        each JSON in static identifierTokens.value {
            *document.identifierTokens.add() = IdentifierToken(it)
        }
    }

    functions <<JSON> List> Optional = ast.field("functions").array()
    if functions.has {
        document.functions.clear()

        each JSON in static functions.value {
            *document.functions.add() = Function(it)
        }
    }

    composites <<JSON> List> Optional = ast.field("composites").array()
    if composites.has {
        document.composites.clear()

        each JSON in static composites.value {
            *document.composites.add() = Composite(it)
        }
    }

    aliases <<JSON> List> Optional = ast.field("aliases").array()
    if aliases.has {
        document.aliases.clear()

        each JSON in static aliases.value {
            *document.aliases.add() = Alias(it)
        }
    }

    function_aliases <<JSON> List> Optional = ast.field("function_aliases").array()
    if function_aliases.has {
        document.function_aliases.clear()

        each JSON in static function_aliases.value {
            *document.function_aliases.add() = FunctionAlias(it)
        }
    }

    enums <<JSON> List> Optional = ast.field("enums").array()
    if enums.has {
        document.enums.clear()

        each JSON in static enums.value {
            *document.enums.add() = Enum(it)
        }
    }

    named_expressions <<JSON> List> Optional = ast.field("namedExpressions").array()
    if named_expressions.has {
        document.named_expressions.clear()

        each JSON in static named_expressions.value {
            *document.named_expressions.add() = NamedExpression(it)
        }
    }
}

func getFilenameFromURI(uri String) String {
    if uri.startsWith("file://") {
        return uri.segment(7, uri.length)
    } else {
        return uri.commit()
    }
}

func publishDiagnostics(document *Document) {
    if document == null, return

    diagnostics JSON = JSON\array()

    each Diagnostic in document.diagnostics {
        diagnostics.add(it.toJSON())
    }

    params JSON = JSON({
        AsymmetricPair("uri", JSON(document.uri.clone())),
        AsymmetricPair("version", JSON\number(document.version as double)),
        AsymmetricPair("diagnostics", diagnostics.commit()),
    })

    response JSON = JSON({
        AsymmetricPair("jsonrpc", JSON("2.0")),
        AsymmetricPair("method", JSON("textDocument/publishDiagnostics")),
        AsymmetricPair("params", params.commit())
    })

    lsp\writeMessage(response)
}

