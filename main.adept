
pragma compiler_version '2.8'
pragma project_name 'adeptls'

import basics
import "insight.adept"
import "lsp.adept"
import "log.adept"

func main int {
    adeptls\running bool = true
    adeptls\did_shutdown bool = false

    log("Starting up adeptls!\n")

    log("Initializing logging...\n")
    initializeLogging()

    log("Waiting for initialization request...\n")

    while adeptls\running {
        message *Message = lsp\readMessage()
        defer del(message)

        log("Processing Message:\n")
        log(message.toString())
        log("\n")

        if message.method == "initialize" {
            initialize(message.id)
        } elif message.method == "initialized" {
            initialized()
        } elif message.method == "shutdown" {
            shutdown(message.id)
            adeptls\did_shutdown = true
        } elif message.method == "exit" {
            adeptls\running = false
        } elif message.method == "textDocument/hover" {
            hover(message.id)
        }
    }

    log("Exiting!\n")

    finalizeLogging()
    return adeptls\did_shutdown ? 0 : 1
}

func initialize(id JSON) {
    capabilities <<String, JSON> AsymmetricPair> InitializerList = {
        AsymmetricPair("hoverProvider", JSON(true))
    }

    response JSON = JSON({
        AsymmetricPair("jsonrpc", JSON("2.0")),
        AsymmetricPair("id", id),
        AsymmetricPair("result", JSON({
            AsymmetricPair("capabilities", JSON(capabilities)),
            AsymmetricPair("serverInfo", JSON({
                AsymmetricPair("name", JSON("adeptls")),
                AsymmetricPair("version", JSON("2.8"))
            }))
        }))
    })

    lsp\writeMessage(response)
}

func initialized() {
    log("Initialization successful!\n")
}

func shutdown(id JSON) {
    response JSON = JSON({
        AsymmetricPair("jsonrpc", JSON("2.0")),
        AsymmetricPair("id", id),
        AsymmetricPair("result", JSON\null())
    })

    lsp\writeMessage(response)
}

func hover(id JSON) {
    response JSON = JSON({
        AsymmetricPair("jsonrpc", JSON("2.0")),
        AsymmetricPair("id", id),
        AsymmetricPair("result", JSON({
            AsymmetricPair("contents", JSON("This is a hover completion!")),
        }))
    })

    lsp\writeMessage(response)
}
