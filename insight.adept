
foreign "obj/insight.a"
foreign server_main(*ubyte) *ubyte

record Position (line, character usize) {
    constructor(json JSON) {
        this.line = json.field("line").number().orElse(0.0) as usize
        this.character = json.field("character").number().orElse(0.0) as usize
    }
}

record Range (start, end Position) {
    constructor(json JSON) {
        this.start = Position(json.field("start"))
        this.end = Position(json.field("end"))
    }
}

record IdentifierToken (content String, range Range) {
    constructor(json JSON) {
        this.content = json.field("content").string().orElse("").toOwned()
        this.range = Range(json.field("range"))
    }

    func clone IdentifierToken {
        return IdentifierToken(this.content.clone(), this.range)
    }
}

import JSON

adeptls\root String = "/Users/isaac/Projects/Adept/build/macOS-Release/"

func invokeInsight(json JSON) JSON {
    serialized String = json.serialize()
    serialized.append('\0'ub)

    return JSONFromString(StringView(server_main(serialized.array)))
}

func update(uri String) {
    log("Running update...\n")

    document *Document = adeptls\documents.getPointer(uri)
    if document == null, return

    log("Has document...\n")

    filename String = getFilenameFromURI(uri)

    log("Running insight...\n")

    response JSON = invokeInsight(JSON({
        AsymmetricPair("query", JSON("ast")),
        AsymmetricPair("infrastructure", JSON(adeptls\root.toOwned())),
        AsymmetricPair("filename", JSON(filename.toOwned())),
        AsymmetricPair("code", JSON(document.text_content.toOwned())),
    }))

    log("Got insight response...\n")

    if response.kind() == ::STRING {
        // Error occurred
    }

    ast JSON = response.field("ast")

    if ast.kind() == ::OBJECT {
        // Updated AST
        document.ast = ast
    }

    identifierTokens <<JSON> List> Optional = response.field("identifierTokens").array()

    if identifierTokens.has {
        // Update identifier tokens
        document.identifierTokens.clear()

        each JSON in static identifierTokens.value {
            *document.identifierTokens.add() = POD IdentifierToken(it)
        }
    }
}

func getFilenameFromURI(uri String) String {
    if uri.startsWith("file://") {
        return uri.segment(7, uri.length)
    } else {
        return uri.commit()
    }
}
